// section: test
package keys_test

import (
	"testing"
	"time"

	"github.com/gopherguides/learn/_training/testing/async/src/keys"
)

func TestStoreSolution(t *testing.T) {
	store := keys.NewStore()
	store.Set("foo", "bar")

	TimeoutRetry(t, 5*time.Second, func() error {
		t.Log("store.Get...")
		v, err := store.Get("foo")

		if err != nil {
			// Return the error now, as we want this to retry
			// when we encounter a `not found` error
			return err
		}

		s, ok := v.(string)
		if !ok {
			t.Fatalf("unexpected value type.  got %T, exp: string", v)
		}

		if got, exp := s, "bar"; got != exp {
			// If we got this far, we read the value for the key... but
			t.Fatalf("unexpected value.  got: %s, exp: %s", got, exp)
		}
		return nil
	})
}

func TimeoutRetry(t *testing.T, timeout time.Duration, fn func() error) {
	timer := time.NewTimer(timeout)
	defer timer.Stop()

	ticker := time.NewTicker(25 * time.Millisecond)
	defer ticker.Stop()

	var err error
	for {
		// Run the function and save the last error, if any. Exit if no error.
		if err = fn(); err == nil {
			return
		}

		select {
		case <-timer.C:
			// Time is up, we've exceeded the deadline.
			// Include the last known error as well for debugging purposes
			t.Fatalf("%s (%s timeout)", err, timeout)
		case <-ticker.C:
			// interval is up, time to continue and retry our test
			continue
		}
	}
}

// section: test

/*
// section: output
$ go test . -v -run TestStoreSolution -count 1
=== RUN   TestStoreSolution
--- PASS: TestStoreSolution (2.01s)
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
    solution_test.go:17: store.Get...
PASS
ok      github.com/gopherguides/learn/_training/testing/async/src/keys  2.012s

// section: output
*/
